{"version":3,"sources":["hooks/useTree.js","components/Item.js","components/List.js","components/Info.js","components/Edit.js","App.js","serviceWorker.js","index.js"],"names":["useTree","useState","root","setRoot","map","setMap","trees","setTrees","tree","setTree","useEffect","fetch","then","response","json","nodes","object","forEach","node","id","parent","hierarchy_name","indexOf","prev","children","Item","props","showChildren","setShowChildren","addMenu","setAddMenu","options","setOptions","cc_code","alias","data-key","className","length","onClick","data-event","event","target","parentNode","getAttribute","List","key","Info","selected","Edit","description","defaultValue","App","setSelected","editing","setEditing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ecb9468.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useTree = () => {\n  const [root, setRoot] = useState([]);\n  const [map, setMap] = useState({});\n  const [trees, setTrees] = useState([]);\n  const [tree, setTree] = useState('');\n\n  useEffect(() => {\n    fetch('./assets/response.json')\n      .then((response) => response.json())\n      .then((nodes) => {\n        const object = {};\n        nodes.forEach((node) => {\n          const { id, parent, hierarchy_name } = node;\n          if (trees.indexOf(hierarchy_name) === -1) {\n            setTrees((prev) => [...prev, hierarchy_name]);\n          }\n          if (!tree) {\n            setTree(hierarchy_name);\n          }\n          if (!parent) {\n            setRoot((prev) => [...prev, id]);\n          }\n          if (!object[id]) {\n            object[id] = { ...node, children: [] };\n          } else {\n            object[id] = { ...object[id], ...node };\n          }\n          if (parent && !object[parent]) {\n            object[parent] = { children: [id] };\n          } else if (parent) {\n            object[parent] = {\n              ...object[parent],\n              children: [...object[parent].children, id],\n            };\n          }\n        });\n        setMap(object);\n      });\n  }, []);\n\n  return { root, map, trees, setTree, setMap };\n};\n\nexport default useTree;\n","import React, { useState } from 'react';\nimport List from './List';\n\nconst Item = (props) => {\n  const [showChildren, setShowChildren] = useState(false);\n  const [addMenu, setAddMenu] = useState(false);\n  const [options, setOptions] = useState(false);\n  const { map, id } = props;\n  const { cc_code, children, alias } = map[id];\n  return (\n    <li\n      data-key={id}\n      className={`${\n        !children.length && `leaf`\n      } animate__animated animate__flipInX`}\n    >\n      {cc_code}\n      {alias && ` - ${alias}`}\n      {options && !addMenu ? (\n        <div>\n          <span className=\"primary-highlight\" onClick={() => setAddMenu(true)}>\n            Add\n          </span>\n          <span className=\"secondary-highlight\" data-event=\"edit\">\n            Edit\n          </span>\n          <span className=\"warning\" data-event=\"remove\">\n            Delete\n          </span>\n          <span onClick={() => setOptions(false)}>Cancel</span>\n        </div>\n      ) : (\n        <div>\n          {children.length && !addMenu ? (\n            <span\n              onClick={(event) => {\n                if (\n                  event.target.parentNode.parentNode.getAttribute(\n                    'data-key'\n                  ) === id &&\n                  children\n                ) {\n                  setShowChildren(!showChildren);\n                }\n              }}\n            >\n              {!showChildren ? 'Expand' : 'Collapse'}\n            </span>\n          ) : null}\n          <span\n            onClick={() => {\n              setAddMenu(false);\n              setOptions(true);\n            }}\n          >\n            Options\n          </span>\n        </div>\n      )}\n      {addMenu && (\n        <div>\n          <span className=\"primary-highlight\">Child</span>\n          <span className=\"primary-highlight\">Sibling</span>\n        </div>\n      )}\n      {children && showChildren && <List nodes={children} map={map} />}\n    </li>\n  );\n};\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item';\nimport './List.scss';\n\nconst List = (props) => {\n  const { nodes, map } = props;\n  return (\n    <ul className=\"List\">\n      {nodes.map((id) =>\n        map[id] ? <Item key={id} id={id} map={map} /> : null\n      )}\n    </ul>\n  );\n};\n\nexport default List;\n","import React, { useState } from 'react';\n\nconst Info = (props) => {\n  const [name, setName] = useState('');\n  const { selected } = props;\n  return (\n    <div className=\"Info\">\n      <h1>{selected['cc_code']}</h1>\n      {selected['alias'] && <h3>{selected['alias']}</h3>}\n      <p>\n        {selected['description'] ? (\n          selected['description']\n        ) : (\n          <i>No description available.</i>\n        )}\n      </p>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from 'react';\nimport './Edit.scss';\n\nconst Edit = (props) => {\n  if (props.node) {\n    const { cc_code, alias, description } = props.node;\n    return (\n      <div className=\"Edit\">\n      <label>Name</label>\n        <input defaultValue={cc_code} />\n      <label>Title</label>\n        <input defaultValue={alias} />\n      <label>Description</label>\n        <textarea defaultValue={description}></textarea>\n        <button>Save</button>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default Edit;\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport useTree from './hooks/useTree';\nimport List from './components/List';\nimport Info from './components/Info';\nimport Edit from './components/Edit';\n\nfunction App() {\n  const { root, map, setMap } = useTree();\n  const [selected, setSelected] = useState(null);\n  const [editing, setEditing] = useState(false);\n  useEffect(() => setSelected(root[0]), [map, root]);\n\n  const select = (event) => {\n    let key = event.target.getAttribute('data-key');\n    const string = event.target.getAttribute('data-event');\n    if (string === 'edit') {\n      key = event.target.parentNode.parentNode.getAttribute('data-key');\n      setEditing(true);\n    } else if (key) {\n      setEditing(false);\n    }\n    if (key) {\n      setSelected(key);\n    }\n  };\n\n  return (\n    <div className=\"App\" onClick={select}>\n      <List nodes={root} map={map} />\n      {map[selected] && !editing ? (\n        <Info selected={map[selected]} map={map} setMap={setMap} />\n      ) : (\n        <Edit node={map[selected]}  />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
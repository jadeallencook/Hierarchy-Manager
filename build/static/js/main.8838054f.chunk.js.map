{"version":3,"sources":["hooks/useTree.js","components/Item.js","components/List.js","components/Select.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["useTree","useState","root","setRoot","map","setMap","trees","setTrees","tree","setTree","useEffect","level","fetch","then","response","json","nodes","forEach","node","id","parent","level_number","hierarchy_name","indexOf","children","Item","props","showChildren","setShowChildren","cc_code","data-key","className","length","onClick","event","target","getAttribute","List","key","Select","index","value","Info","name","setName","selected","Object","keys","JSON","stringify","type","onChange","placeholder","Math","floor","random","toString","App","setSelected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uPAgDeA,EA9CC,WAAO,IAAD,EACIC,mBAAS,IADb,mBACbC,EADa,KACPC,EADO,OAEEF,mBAAS,IAFX,mBAEbG,EAFa,KAERC,EAFQ,OAGMJ,mBAAS,IAHf,mBAGbK,EAHa,KAGNC,EAHM,OAIIN,mBAAS,IAJb,mBAIbO,EAJa,KAIPC,EAJO,KA2CpB,OArCAC,qBAAU,WACR,IAAIC,EAAQ,EACZC,MAAM,0BACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJA,EAAMC,SAAQ,SAACC,GAAU,IACfC,EAA6CD,EAA7CC,GAAIC,EAAyCF,EAAzCE,OAAQC,EAAiCH,EAAjCG,aAAcC,EAAmBJ,EAAnBI,gBACK,IAAnChB,EAAMiB,QAAQD,IAChBf,EAAS,GAAD,mBAAKD,GAAL,CAAYgB,KAEjBd,GACHC,EAAQa,GAEND,EAAeV,GACjBA,EAAQU,EACRlB,EAAQ,CAACgB,KACAE,IAAiBV,GAC1BR,EAAQ,GAAD,mBAAKD,GAAL,CAAWiB,KAEff,EAAIe,GAGPf,EAAIe,GAAJ,eAAef,EAAIe,GAAnB,GAA2BD,GAF3Bd,EAAIe,GAAJ,eAAeD,EAAf,CAAqBM,SAAU,KAI7BJ,IAAWhB,EAAIgB,GACjBhB,EAAIgB,GAAU,CAAEI,SAAU,CAACL,IAClBC,IACThB,EAAIgB,GAAJ,eACKhB,EAAIgB,GADT,CAEEI,SAAS,GAAD,mBAAMpB,EAAIgB,GAAQI,UAAlB,CAA4BL,OAGxCd,EAAOD,WAGZ,IAEI,CAAEF,OAAME,MAAKE,QAAOG,UAASJ,WCtBvBoB,EApBF,SAACC,GAAW,IAAD,EACkBzB,oBAAS,GAD3B,mBACf0B,EADe,KACDC,EADC,KAEdxB,EAAYsB,EAAZtB,IAAKe,EAAOO,EAAPP,GAFS,EAGQf,EAAIe,GAA1BU,EAHc,EAGdA,QAASL,EAHK,EAGLA,SACjB,OACE,wBACEM,WAAUX,EACVY,UAAYP,EAASQ,OAAkB,KAA5B,OACXC,QAAS,SAACC,GACJA,EAAMC,OAAOC,aAAa,cAAgBjB,GAAMK,GAClDI,GAAiBD,KAIpBE,EACAL,GAAYG,GAAgB,kBAAC,EAAD,CAAMX,MAAOQ,EAAUpB,IAAKA,MCJhDiC,EAXF,SAACX,GAAW,IACfV,EAAeU,EAAfV,MAAOZ,EAAQsB,EAARtB,IACf,OACE,4BACGY,EAAMZ,KAAI,SAACe,GAAD,OACTf,EAAIe,GAAM,kBAAC,EAAD,CAAMmB,IAAKnB,EAAIA,GAAIA,EAAIf,IAAKA,IAAU,UCOzCmC,EAbA,SAACb,GACd,OACE,gCACGA,EAAMpB,OACLoB,EAAMpB,MAAMF,KAAI,SAACI,EAAMgC,GAAP,OACd,4BAAQC,MAAOjC,EAAM8B,IAAG,eAAUE,IAC/BhC,Q,OCyCEkC,EA/CF,SAAChB,GAAW,IAAD,EACEzB,mBAAS,IADX,mBACf0C,EADe,KACTC,EADS,KAEdvC,EAA0BqB,EAA1BrB,OAAQwC,EAAkBnB,EAAlBmB,SAAUzC,EAAQsB,EAARtB,IAuB1B,OACE,yBAAK2B,UAAU,QACb,6BACCe,OAAOC,KAAKF,GAAUzC,KAAI,SAACkC,EAAKE,GAAN,OACzB,0BAAMF,IAAKA,GACT,2BAAIA,EAAJ,KADF,IACiBU,KAAKC,UAAUJ,EAASP,IACvC,iCAGJ,6BACA,2BACEY,KAAK,OACLC,SAAU,SAACjB,GAAD,OAAWU,EAAQV,EAAMC,OAAOM,QAC1CA,MAAOE,EACPS,YAAY,cAEd,4BAAQnB,QAtCK,WACf,IAEsB,EAFhBd,GAAMkC,KAAKC,MAAsB,OAAhBD,KAAKE,UAAqB,QAAQC,WACjDlC,EAA2CuB,EAA3CvB,eAAgBE,EAA2BqB,EAA3BrB,SAAUH,EAAiBwB,EAAjBxB,aAC9BsB,IAASvC,EAAIe,KACfd,EAAO,eACFD,GADC,mBAEHyC,EAAS1B,GAFN,eAGC0B,EAHD,CAIFrB,SAAS,GAAD,mBAAMA,GAAN,CAAgBL,OAJtB,cAMHA,EAAK,CACJE,aAAcA,EAAe,EAC7BQ,QAASc,EACTnB,SAAU,GACVJ,OAAQyB,EAAS1B,GACjBG,iBACAH,OAZE,KAeNyB,EAAQ,OAmBR,aACA,+BClBSa,MAnBf,WAAgB,IAAD,EACiCzD,IAAtCE,EADK,EACLA,KAAME,EADD,EACCA,IAAKE,EADN,EACMA,MAAOG,EADb,EACaA,QAASJ,EADtB,EACsBA,OADtB,EAEmBJ,mBAAS,MAF5B,mBAEN4C,EAFM,KAEIa,EAFJ,KAQb,OACE,yBAAK3B,UAAU,MAAME,QALR,SAACC,GAAD,OACbA,EAAMC,OAAOC,aAAa,aAC1BsB,EAAYxB,EAAMC,OAAOC,aAAa,eAIpC,kBAAC,EAAD,CAAQ9B,MAAOA,EAAOG,QAASA,IAC9BL,EAAIyC,IACH,kBAAC,EAAD,CAAMA,SAAUzC,EAAIyC,GAAWzC,IAAKA,EAAKC,OAAQA,IAEnD,kBAAC,EAAD,CAAMW,MAAOd,EAAME,IAAKA,MCTVuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8838054f.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useTree = () => {\n  const [root, setRoot] = useState([]);\n  const [map, setMap] = useState({});\n  const [trees, setTrees] = useState([]);\n  const [tree, setTree] = useState('');\n\n  useEffect(() => {\n    let level = 0;\n    fetch('./assets/response.json')\n      .then((response) => response.json())\n      .then((nodes) =>\n        nodes.forEach((node) => {\n          const { id, parent, level_number, hierarchy_name } = node;\n          if (trees.indexOf(hierarchy_name) === -1) {\n            setTrees([...trees, hierarchy_name]);\n          }\n          if (!tree) {\n            setTree(hierarchy_name);\n          }\n          if (level_number > level) {\n            level = level_number;\n            setRoot([id]);\n          } else if (level_number === level) {\n            setRoot([...root, id]);\n          }\n          if (!map[id]) {\n            map[id] = { ...node, children: [] };\n          } else {\n            map[id] = { ...map[id], ...node };\n          }\n          if (parent && !map[parent]) {\n            map[parent] = { children: [id] };\n          } else if (parent) {\n            map[parent] = {\n              ...map[parent],\n              children: [...map[parent].children, id],\n            };\n          }\n          setMap(map);\n        })\n      );\n  }, []);\n\n  return { root, map, trees, setTree, setMap };\n};\n\nexport default useTree;\n","import React, { useState } from 'react';\nimport List from './List';\n\nconst Item = (props) => {\n  const [showChildren, setShowChildren] = useState(false);\n  const { map, id } = props;\n  const { cc_code, children } = map[id];\n  return (\n    <li\n      data-key={id}\n      className={!children.length ? `leaf` : null}\n      onClick={(event) => {\n        if (event.target.getAttribute('data-key') === id && children) {\n          setShowChildren(!showChildren);\n        }\n      }}\n    >\n      {cc_code}\n      {children && showChildren && <List nodes={children} map={map} />}\n    </li>\n  );\n};\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item';\n\nconst List = (props) => {\n  const { nodes, map } = props;\n  return (\n    <ul>\n      {nodes.map((id) =>\n        map[id] ? <Item key={id} id={id} map={map} /> : null\n      )}\n    </ul>\n  );\n};\n\nexport default List;\n","import React from 'react';\n\nconst Select = (props) => {\n  return (\n    <select>\n      {props.trees &&\n        props.trees.map((tree, index) => (\n          <option value={tree} key={`tree-${index}`}>\n            {tree}\n          </option>\n        ))}\n    </select>\n  );\n};\n\nexport default Select;\n","import React, { useState } from 'react';\n\nconst Info = (props) => {\n  const [name, setName] = useState('');\n  const { setMap, selected, map } = props;\n  const addChild = () => {\n    const id = (Math.floor(Math.random() * 999999) + 111111).toString();\n    const { hierarchy_name, children, level_number } = selected;\n    if (name && !map[id]) {\n      setMap({\n        ...map,\n        [selected.id]: {\n          ...selected,\n          children: [...children, id],\n        },\n        [id]: {\n          level_number: level_number - 1,\n          cc_code: name,\n          children: [],\n          parent: selected.id,\n          hierarchy_name,\n          id,\n        },\n      });\n      setName('');\n    }\n  };\n  return (\n    <div className=\"Info\">\n      <br />\n      {Object.keys(selected).map((key, index) => (\n        <span key={key}>\n          <b>{key}:</b> {JSON.stringify(selected[key])}\n          <br />\n        </span>\n      ))}\n      <br />\n      <input\n        type=\"text\"\n        onChange={(event) => setName(event.target.value)}\n        value={name}\n        placeholder=\"Node Name\"\n      />\n      <button onClick={addChild}>Add Child</button>\n      <br />\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport useTree from './hooks/useTree';\nimport List from './components/List';\nimport Select from './components/Select';\nimport Info from './components/Info';\n\nfunction App() {\n  const { root, map, trees, setTree, setMap } = useTree();\n  const [selected, setSelected] = useState(null);\n\n  const select = (event) =>\n    event.target.getAttribute('data-key') &&\n    setSelected(event.target.getAttribute('data-key'));\n\n  return (\n    <div className=\"App\" onClick={select}>\n      <Select trees={trees} setTree={setTree} />\n      {map[selected] && (\n        <Info selected={map[selected]} map={map} setMap={setMap} />\n      )}\n      <List nodes={root} map={map} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}